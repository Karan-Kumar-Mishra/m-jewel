/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package jewellery;

import java.sql.*;
import java.awt.event.KeyEvent;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import static jewellery.DBConnect.connect;
import static jewellery.LoginPageRedesigned.staticdashboared;

/**
 *
 * @author shrey
 */
import static jewellery.SaleScreen.txtexchange;

import static jewellery.SaleScreen.txtreceive;
import static jewellery.SaleScreen.*;

public class ExChange extends javax.swing.JFrame {
    
    private List<Object> columnNames = new ArrayList<>();
    private final List<Object> data = new ArrayList<>();
//    private static int id = 0;
    String material;

    /**
     * Creates new form ExChange
     */
    public ExChange() {
        initComponents();
        material = jComboBox1.getSelectedItem().toString().trim();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    double totalAmountexchange = 0;
    
    private double gettotal() {
        totalAmountexchange = 0;
        for (int i = 0; i < table.getRowCount(); i++) {
            totalAmountexchange += Double.parseDouble(table.getValueAt(i, 6).toString());
        }
        return totalAmountexchange;
    }
    
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        ipgrossweight = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        ipfine = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        ipnetweight = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        iprate = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        iptotal = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        ipitemname = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setBackground(new java.awt.Color(57, 68, 76));
        setUndecorated(true);

        jLabel1.setText("    Item Name");

        ipgrossweight.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                ipgrossweightKeyPressed(evt);
            }
        });

        jLabel2.setText("         Fine");

        ipfine.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                ipfineKeyReleased(evt);
            }
        });

        jLabel3.setText("     Net Weight");

        ipnetweight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ipnetweightActionPerformed(evt);
            }
        });

        jLabel4.setText("         Rate");

        iprate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                iprateActionPerformed(evt);
            }
        });
        iprate.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                iprateKeyReleased(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel5.setText("EXCHANGE");

        jButton1.setText("Exchange");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Gold", "Silver" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jLabel6.setText("         Total");

        iptotal.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                iptotalKeyPressed(evt);
            }
        });

        jLabel7.setText("   Gross Weight");

        ipitemname.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ipitemnameActionPerformed(evt);
            }
        });
        ipitemname.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                ipitemnameKeyReleased(evt);
            }
        });

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Type", "Item name", "Gross Weight", "Fine", "Net Weight", "Rate", "Total"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(table);

        jButton2.setBackground(new java.awt.Color(255, 0, 0));
        jButton2.setFont(new java.awt.Font("sansserif", 1, 14)); // NOI18N
        jButton2.setText("DELETE");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setFont(new java.awt.Font("sansserif", 1, 18)); // NOI18N
        jButton3.setForeground(new java.awt.Color(255, 0, 0));
        jButton3.setText("x");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(125, 125, 125)
                        .addComponent(jLabel7)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(ipnetweight, javax.swing.GroupLayout.DEFAULT_SIZE, 101, Short.MAX_VALUE)
                            .addComponent(ipgrossweight, javax.swing.GroupLayout.DEFAULT_SIZE, 101, Short.MAX_VALUE)
                            .addComponent(iptotal))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(34, 34, 34)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(iprate, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(186, 186, 186))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(ipitemname, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(ipfine, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 285, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton3))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(24, 24, 24))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton3)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5))))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ipitemname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(ipgrossweight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ipfine, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(ipnetweight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(iprate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(iptotal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(34, 34, 34)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(15, 15, 15))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    public void fillData(int bill) throws FileNotFoundException {
        
        if (!DBController.isDatabaseConnected()) {
            DBController.connectToDatabase(DatabaseCredentials.DB_ADDRESS,
                    DatabaseCredentials.DB_USERNAME,
                    DatabaseCredentials.DB_PASSWORD);
        }
        columnNames = DBController.getTableColumnNames(DatabaseCredentials.EXCHANGE_TABLE);
        columnNames.remove(0);
//                JOptionPane.showMessageDialog(this, columnNames.size());
//                JOptionPane.showMessageDialog(this, columnNames);

        for (int i = 0; i < table.getRowCount(); i++) {
            
            long roundedTotal = Math.round(gettotal()); // Rounds to nearest whole number
            txtexchange.setText(Long.toString(roundedTotal));
            
            staticdashboared.sc.fillgrandtotal();
            Double t = Double.valueOf(txtreceive.getText());
            Double e = Double.valueOf(txtexchange.getText());
            txtreceive.setText(String.valueOf(t - e));
            data.add(table.getValueAt(i, 1));//ITEM 6  GROSSWT 1  FINE 2  NETWT 3  RATE 4  TOTAL 5  BILL
            data.add(table.getValueAt(i, 2));
            data.add(table.getValueAt(i, 3));
            data.add(table.getValueAt(i, 4));
            data.add(table.getValueAt(i, 5));
            data.add(table.getValueAt(i, 6));
            data.add(billno);
            data.add(table.getValueAt(i, 0));
            System.out.println(table.getValueAt(i, 0));
            
            boolean itemUpdated = DBController.insertDataIntoTable(DatabaseCredentials.EXCHANGE_TABLE,
                    columnNames, data);
            data.removeAll(data);
        }
    }
    
    public void fetchData(int bill) throws FileNotFoundException {
        jLabel5.setText("UPDATE EXCHANGE");
        jButton1.setText("UPDATE EXCHANGE");
        String statement = "SELECT * FROM `exchange` WHERE bill = " + String.valueOf(bill) + ";";
        Connection con = connect();
        String id = null, name = null, grosswt = null, rate = null, fine = null, netwt = null, total = null, terms = null;
        try {
            Statement stmt = con.createStatement();
            ResultSet rs = stmt.executeQuery(statement);
            DefaultTableModel model = (DefaultTableModel) table.getModel();
            model.setRowCount(0);
            while (rs.next()) {
                id = rs.getString("id");
                name = rs.getString("ItemName");
                grosswt = rs.getString("grosswt");
                fine = rs.getString("fine");
                netwt = rs.getString("netwt");
                total = rs.getString("total");
                rate = rs.getString("rate");
                terms = rs.getString("material");
                model.addRow(new Object[]{terms, name, grosswt, fine, netwt, rate, total});
                
            }
            
        } catch (SQLException ex) {
            Logger.getLogger(ExChange.class.getName()).log(Level.SEVERE, "Failed", ex);
        }
        
    }
    
    public void deleteMethod(int bill) {
        Connection con = DBConnect.connect();
        try {
            Statement stmt = con.createStatement();
            
            String sqlForReceipt = "delete from exchange where `exchange`.`bill`='" + bill + "'";
            stmt.addBatch(sqlForReceipt);
            
            int[] i = stmt.executeBatch();
//            JOptionPane.showMessageDialog(this,"this is deleted query  " +i[0]+" "+i[1]);
            stmt.clearBatch();
            stmt.close();
            
            con.close();
            
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e);
        }
    }
    
    public void updateData(int bill) throws FileNotFoundException {
        deleteMethod(bill);
        fillData(bill);
//        String statement = "UPDATE `exchange` SET `ItemName` = '" + ipitemname.getText() + "', `grosswt` = '" + ipgrossweight.getText() + "', `fine` = '" + ipfine.getText() + "', `netwt` = '" + ipnetweight.getText() + "', `total` = '" + iptotal.getText() + "', `material` = '" + material + "' WHERE `exchange`.`bill` = " + String.valueOf(bill) + ";";
//        Connection con = connect();
//        try {
//            Statement stmt = con.createStatement();
//            stmt.executeUpdate(statement);
//        } catch (SQLException ex) {
//            Logger.getLogger(ExChange.class.getName()).log(Level.SEVERE, null, ex);
//        }

    }
    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        // TODO add your handling code here:
        material = (String) jComboBox1.getSelectedItem();
    }//GEN-LAST:event_jComboBox1ActionPerformed
    public void saveData() {
        String statement = "INSERT INTO `exchange` (`id`, `ItemName`, `grosswt`, `fine`, `netwt`, `total`,`bill`,`material`) VALUES  (NULL,'" + ipitemname.getText() + "','" + ipgrossweight.getText() + "','" + ipfine.getText() + "','" + ipnetweight.getText() + "','" + ipnetweight.getText() + "','" + billno + "','" + material + "');";
        
    }
    
    public void clear() {
        ipgrossweight.setText("");
        ipfine.setText("");
        ipnetweight.setText("");
        iprate.setText("");
        iptotal.setText("");
        ipitemname.setText("");
    }
    private void ipnetweightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ipnetweightActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_ipnetweightActionPerformed

    private void ipfineKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ipfineKeyReleased
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            Double gwt, fine;
            gwt = Double.valueOf(ipgrossweight.getText());
            if (!ipfine.getText().trim().isEmpty()) {
                fine = Double.valueOf(ipfine.getText());
                netwt = (gwt * fine) / 100;
                
                ipnetweight.setText(String.format("%.4f", netwt));
                iprate.requestFocus();
            }
            
        }// TODO add your handling code here:
    }//GEN-LAST:event_ipfineKeyReleased
    static Double exchngamt = 0.0, netwt;
    private void iprateKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_iprateKeyReleased
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            Double rate = Double.valueOf(iprate.getText());
            exchngamt = rate * netwt;
            iptotal.setText(String.format("%.2f", exchngamt));
            iptotal.requestFocus();
        }
// TODO add your handling code here:
    }//GEN-LAST:event_iprateKeyReleased

    private void ipitemnameKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ipitemnameKeyReleased
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            ipgrossweight.requestFocus();
        }        // TODO add your handling code here:
    }//GEN-LAST:event_ipitemnameKeyReleased

    private void ipgrossweightKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ipgrossweightKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            ipfine.requestFocus();
        }        // TODO add your handling code here:
    }//GEN-LAST:event_ipgrossweightKeyPressed

    private void ipitemnameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ipitemnameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ipitemnameActionPerformed

    private void iprateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_iprateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_iprateActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {
            staticdashboared.sc.fillgrandtotal();
            long roundedTotal = Math.round(gettotal()); // Rounds to nearest whole number
            txtexchange.setText(Long.toString(roundedTotal));
//           JOptionPane.showMessageDialog(this,txtgrandtotal.getText() );
            Double t = Double.valueOf(txtreceive.getText());
            Double e = Double.valueOf(txtexchange.getText());
            txtreceive.setText(String.format("%.3f", t - e));
            
            this.setVisible(false);
        } catch (Exception e) {
            Logger.getLogger(ExChange.class.getName()).log(Level.SEVERE, "Failed", e);
            
        }

        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void iptotalKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_iptotalKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            if (iptotal.getText().trim().isEmpty()) {
                JOptionPane.showMessageDialog(this, "Enter Valid Entry");
            } else {
                String itemType = jComboBox1.getSelectedItem().toString();
                String itemname = ipitemname.getText();
                String grossweight = ipgrossweight.getText();
                String Fine = ipfine.getText();
                String netWeight = ipnetweight.getText();
                String total = iptotal.getText();
                String rate = iprate.getText();
                if (table.getSelectedRowCount() == 1) {
                    DefaultTableModel tbmodel = (DefaultTableModel) table.getModel();

                    /////////////////////////////////////
                    tbmodel.setValueAt(itemType, table.getSelectedRow(), 0);
                    tbmodel.setValueAt(itemname, table.getSelectedRow(), 1);
                    tbmodel.setValueAt(grossweight, table.getSelectedRow(), 2);
                    tbmodel.setValueAt(Fine, table.getSelectedRow(), 3);
                    tbmodel.setValueAt(netWeight, table.getSelectedRow(), 4);
                    tbmodel.setValueAt(rate, table.getSelectedRow(), 5);
                    tbmodel.setValueAt(total, table.getSelectedRow(), 6);
                    
                } else {
                    DefaultTableModel model = (DefaultTableModel) table.getModel();
                    model.addRow(new Object[]{itemType, itemname, grossweight, Fine, netWeight, rate, total});
                    
                }
                jComboBox1.requestFocus();
            }
        } else if (evt.getKeyCode() == KeyEvent.VK_SPACE) {
            String itemType = jComboBox1.getSelectedItem().toString();
            String itemname = ipitemname.getText();
            String grossweight = ipgrossweight.getText();
            String Fine = ipfine.getText();
            String netWeight = ipnetweight.getText();
            String total = iptotal.getText();
            String rate = iprate.getText();
            if (table.getSelectedRowCount() == 1) {
                DefaultTableModel tbmodel = (DefaultTableModel) table.getModel();

                /////////////////////////////////////
                tbmodel.setValueAt(itemType, table.getSelectedRow(), 0);
                tbmodel.setValueAt(itemname, table.getSelectedRow(), 1);
                tbmodel.setValueAt(grossweight, table.getSelectedRow(), 2);
                tbmodel.setValueAt(Fine, table.getSelectedRow(), 3);
                tbmodel.setValueAt(netWeight, table.getSelectedRow(), 4);
                tbmodel.setValueAt(rate, table.getSelectedRow(), 5);
                tbmodel.setValueAt(total, table.getSelectedRow(), 6);
                
            } else {
                DefaultTableModel model = (DefaultTableModel) table.getModel();
                model.addRow(new Object[]{itemType, itemname, grossweight, Fine, netWeight, rate, total});
                
            }
            jButton1.requestFocus();
        }
        clear();
        table.clearSelection();
    }//GEN-LAST:event_iptotalKeyPressed

    private void tableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableMouseClicked
        
        DefaultTableModel tmodel = (DefaultTableModel) table.getModel();
        jComboBox1.setSelectedItem(tmodel.getValueAt(table.getSelectedRow(), 0).toString());
        ipitemname.setText(tmodel.getValueAt(table.getSelectedRow(), 1).toString());
        ipgrossweight.setText(tmodel.getValueAt(table.getSelectedRow(), 2).toString());
        ipfine.setText(tmodel.getValueAt(table.getSelectedRow(), 3).toString());
        ipnetweight.setText(tmodel.getValueAt(table.getSelectedRow(), 4).toString());
        iprate.setText(tmodel.getValueAt(table.getSelectedRow(), 5).toString());
        iptotal.setText(tmodel.getValueAt(table.getSelectedRow(), 6).toString());
    }//GEN-LAST:event_tableMouseClicked

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        
        int selectedRow = table.getSelectedRow();
        if (selectedRow != -1) {
            model.removeRow(selectedRow);
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        try {
            clear();
            staticdashboared.sc.ex.fetchData(billno);
            
            this.setVisible(false);
        } catch (Exception e) {
            Logger.getLogger(ExChange.class.getName()).log(Level.SEVERE, "Failed", e);
            
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ExChange.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ExChange.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ExChange.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ExChange.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ExChange().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField ipfine;
    private javax.swing.JTextField ipgrossweight;
    private javax.swing.JTextField ipitemname;
    private javax.swing.JTextField ipnetweight;
    private javax.swing.JTextField iprate;
    private javax.swing.JTextField iptotal;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable table;
    // End of variables declaration//GEN-END:variables
}
