/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package jewellery;

import java.awt.print.PageFormat;
import java.awt.print.Printable;
import java.awt.print.PrinterException;
import java.awt.print.PrinterJob;
import java.awt.Component;
import java.awt.EventQueue;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.event.KeyEvent;
import java.io.File;
import java.io.FileOutputStream;
import java.sql.Connection;
//import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.List;
import java.util.Set;
import java.util.TreeMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import javax.swing.text.JTextComponent;
import org.apache.poi.xssf.usermodel.XSSFCell;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

/**
 *
 * @author Dhawal
 */
public class ItemLists extends javax.swing.JFrame {

    /**
     * Creates new form ItemLists
     */
    private final List<Object> accountNames = new ArrayList<>();
    private final DefaultTableModel m;
    private int selectedRow = -1;
    private List<Object> fieldsData = new ArrayList<>();
    private int id;
    private String itemname;
    public String paths = "";

    public ItemLists() {
                        Logger.getLogger(ItemLists.class.getName()).log(Level.INFO, "itemlist object initiazed!");
        initComponents();

        JTableHeader header = jTable1.getTableHeader();
        header.setFont(new Font("Dialog", Font.BOLD, 18));
        header.setBackground(java.awt.Color.DARK_GRAY);
        header.setForeground(java.awt.Color.white);

        m = (DefaultTableModel) jTable1.getModel();
        m.setRowCount(0);
        try {
            Connection c = DBConnect.connect();
            Statement stmt = c.createStatement();

            ResultSet rs = stmt.executeQuery("Select distinct(itemname) from entryitem ;");
            while (rs.next()) {
                String itemname = rs.getString("itemname");

                Statement st = c.createStatement();
                ResultSet rs1 = st.executeQuery("select sum(grosswt), sum(netwt), sum(diamondwt) from entryitem where "
                        + "itemname = '" + itemname + "';");

                String grosswt = "";
                String netwt = "";
                String diamondwt = "";

                while (rs1.next()) {
                    grosswt = String.format("%.2f", rs1.getDouble("sum(grosswt)"));
                    netwt = String.format("%.2f", rs1.getDouble("sum(netwt)"));
                    diamondwt = String.format("%.2f", rs1.getDouble("sum(diamondwt)"));
                }

                rs1.close();
                st.close();

                m.addRow(new Object[]{itemname, grosswt, netwt, diamondwt});

            }

            rs.close();
            c.close();
            stmt.close();
            DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
            centerRenderer.setHorizontalAlignment(JLabel.CENTER);
            for (int g = 0; g < jTable1.getColumnCount(); g++) {
                jTable1.getColumnModel().getColumn(g).setCellRenderer(centerRenderer);
            }

        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        newbtn = new javax.swing.JButton();
        Refreshbtn = new javax.swing.JButton();
        closebtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        printButton = new javax.swing.JButton();
        exportButton = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        tagPrinting = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(58, 68, 76));
        jPanel1.setForeground(new java.awt.Color(57, 68, 76));
        jPanel1.setMinimumSize(new java.awt.Dimension(0, 0));
        jPanel1.setPreferredSize(new java.awt.Dimension(1264, 661));

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 48)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(238, 188, 81));
        jLabel1.setText("Item");

        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });
        jTextField1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextField1KeyReleased(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(238, 188, 81));
        jLabel2.setText("Search");

        newbtn.setText("New Item");
        newbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newbtnActionPerformed(evt);
            }
        });

        Refreshbtn.setText("Refresh");
        Refreshbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RefreshbtnActionPerformed(evt);
            }
        });

        closebtn.setBackground(new java.awt.Color(255, 0, 0));
        closebtn.setText("Close");
        closebtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closebtnActionPerformed(evt);
            }
        });

        jTable1.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Item Name", "Gross Wt.", "Net Wt.", "Diamond Wt."
            }) {
                boolean[] canEdit = new boolean [] {
                    false, false, false, false
                };

                public boolean isCellEditable(int rowIndex, int columnIndex) {
                    return canEdit [columnIndex];
                }
            }
        );
        jTable1.setRowHeight(25);
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        printButton.setText("Print");
        printButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                printButtonMouseClicked(evt);
            }
        });
        printButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printButtonActionPerformed(evt);
            }
        });

        exportButton.setText("Export");
        exportButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                exportButtonMouseClicked(evt);
            }
        });

        jButton1.setText("Stock");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        tagPrinting.setText("Tag Printing");
        tagPrinting.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tagPrintingMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(411, 411, 411)
                        .addComponent(jLabel1))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jButton1)
                                .addGap(25, 25, 25)
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(newbtn)
                                .addGap(18, 18, 18)
                                .addComponent(printButton)
                                .addGap(18, 18, 18)
                                .addComponent(exportButton)
                                .addGap(18, 18, 18)
                                .addComponent(tagPrinting)
                                .addGap(18, 18, 18)
                                .addComponent(Refreshbtn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(closebtn)
                                .addGap(20, 20, 20))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1008, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(86, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(newbtn, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(closebtn, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(printButton, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(exportButton, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Refreshbtn, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tagPrinting, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 88, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(63, 63, 63))
        );

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1100, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_jTextField1ActionPerformed

    private void RefreshbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RefreshbtnActionPerformed
        // TODO add your handling code here:
        m.setRowCount(0);
        try {
            Connection c = DBConnect.connect();
            Statement stmt = c.createStatement();

            ResultSet rs = stmt.executeQuery("Select distinct(itemname) from entryitem ;");
            while (rs.next()) {
                String itemname = rs.getString("itemname");

                Statement st = c.createStatement();
                ResultSet rs1 = st.executeQuery("select sum(grosswt), sum(netwt), sum(diamondwt) from entryitem where "
                        + "itemname = '" + itemname + "';");

                String grosswt = "";
                String netwt = "";
                String diamondwt = "";

                while (rs1.next()) {
                    grosswt = String.format("%.2f", rs1.getDouble("sum(grosswt)"));
                    netwt = String.format("%.2f", rs1.getDouble("sum(netwt)"));
                    diamondwt = String.format("%.2f", rs1.getDouble("sum(diamondwt)"));
                }

                rs1.close();
                st.close();

                m.addRow(new Object[]{itemname, grosswt, netwt, diamondwt});

            }

            rs.close();
            c.close();
            stmt.close();
            DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
            centerRenderer.setHorizontalAlignment(JLabel.CENTER);
            for (int g = 0; g < jTable1.getColumnCount(); g++) {
                jTable1.getColumnModel().getColumn(g).setCellRenderer(centerRenderer);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_RefreshbtnActionPerformed

    private void closebtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closebtnActionPerformed
        // TODO add your handling code here:
        DashBoardScreen.tabbedPane.remove(DashBoardScreen.tabbedPane.getSelectedComponent());
    }//GEN-LAST:event_closebtnActionPerformed

    private void newbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newbtnActionPerformed
        // TODO add your handling code here:
        try{
       ItemEntryScreen sc= new ItemEntryScreen();
               sc.setVisible(true);
        }catch(Exception e){
            JOptionPane.showMessageDialog(this, e);
        }
    }//GEN-LAST:event_newbtnActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        // TODO add your handling code here:
        if(evt.getClickCount() == 2) {
            DefaultTableModel m = (DefaultTableModel) jTable1.getModel();
            int row = jTable1.getSelectedRow();
            String itemname = m.getValueAt(row, 0).toString();
            ItemEntryScreen ob = new ItemEntryScreen();
            ob.ItemListsRedirect(itemname);
            ob.setVisible(true);
            dispose();
        }
    }//GEN-LAST:event_jTable1MouseClicked

    private void fetchAccountNames() {
        if (!DBController.isDatabaseConnected()) {
            DBController.connectToDatabase(DatabaseCredentials.DB_ADDRESS,
                    DatabaseCredentials.DB_USERNAME, DatabaseCredentials.DB_PASSWORD);
        }

        List<Object> account_names = DBController.executeQuery("SELECT itemname FROM entryitem");

        account_names.forEach((accountName) -> {
            accountNames.add(accountName.toString());
        });
    }
    private void jTextField1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField1KeyReleased
        // TODO add your handling code here:
        fetchAccountNames();
        if (!(accountNames == null || accountNames.isEmpty())) {
            switch (evt.getKeyCode()) {
                case java.awt.event.KeyEvent.VK_BACK_SPACE:
                    if (jTextField1.getText().isEmpty()) {
                        m.setRowCount(0);
                        try {
                            Connection c = DBConnect.connect();
                            Statement stmt = c.createStatement();

                            ResultSet rs = stmt.executeQuery("Select distinct(itemname) from entryitem ;");
                            while (rs.next()) {
                                String itemname = rs.getString("itemname");

                                Statement st = c.createStatement();
                                ResultSet rs1 = st.executeQuery("select sum(grosswt), sum(netwt), sum(diamondwt) from entryitem where "
                                        + "itemname = '" + itemname + "';");

                                String grosswt = "";
                                String netwt = "";
                                String diamondwt = "";

                                while (rs1.next()) {
                                    grosswt = String.format("%.2f", rs1.getDouble("sum(grosswt)"));
                                    netwt = String.format("%.2f", rs1.getDouble("sum(netwt)"));
                                    diamondwt = String.format("%.2f", rs1.getDouble("sum(diamondwt)"));
                                }

                                rs1.close();
                                st.close();

                                m.addRow(new Object[]{itemname, grosswt, netwt, diamondwt});

                            }

                            rs.close();
                            c.close();
                            stmt.close();
                            DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
                            centerRenderer.setHorizontalAlignment(JLabel.CENTER);
                            for (int g = 0; g < jTable1.getColumnCount(); g++) {
                                jTable1.getColumnModel().getColumn(g).setCellRenderer(centerRenderer);
                            }
                        } catch (SQLException e) {
                            e.printStackTrace();
                        }
                    } else {
                        populateSuggestionsTableFromDatabase(m, "SELECT "
                                + "distinct itemname "
                                + "FROM " + DatabaseCredentials.ENTRY_ITEM_TABLE
                                + " WHERE  itemname LIKE " + "'" + jTextField1.getText() + "%'");
                    }
                    break;
                case KeyEvent.VK_ENTER:

                    break;
                default:
                    EventQueue.invokeLater(() -> {

                        populateSuggestionsTableFromDatabase(m, "SELECT "
                                + "distinct itemname "
                                + "FROM " + DatabaseCredentials.ENTRY_ITEM_TABLE
                                + " WHERE  itemname LIKE " + "'" + jTextField1.getText() + "%'");
                    });

            }
        }
    }//GEN-LAST:event_jTextField1KeyReleased

    private void printButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_printButtonMouseClicked
        // TODO add your handling code here:
        PrinterJob job = PrinterJob.getPrinterJob();
        job.setJobName("Print Data");

        job.setPrintable(new Printable() {
            public int print(Graphics pg, PageFormat pf, int pageNum) {
                pf.setOrientation(PageFormat.LANDSCAPE);
                if (pageNum > 0) {
                    return Printable.NO_SUCH_PAGE;
                }

                Graphics2D g2 = (Graphics2D) pg;
                g2.translate(pf.getImageableX(), pf.getImageableY());
                g2.scale(0.55, 1.0);

                jPanel1.print(g2);

                return Printable.PAGE_EXISTS;

            }
        });
        boolean ok = job.printDialog();
        if (ok) {
            try {

                job.print();
            } catch (PrinterException ex) {
                ex.printStackTrace();
            }
        }

    }//GEN-LAST:event_printButtonMouseClicked

    private void exportButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_exportButtonMouseClicked
        // TODO add your handling code here:

        JFileChooser fileChooser = new JFileChooser();
        fileChooser.showSaveDialog(this);
        //        File saveFile = JFileChooser.getSelectedFile();
        SimpleDateFormat dateFormat = new SimpleDateFormat("YYYY-MM-dd");
        String date = dateFormat.format(new Date());

        try {
            File f = fileChooser.getSelectedFile();
            String path = f.getAbsolutePath();
            path = path + "_" + date + ".xlsx";
            paths = path;
        } catch (Exception e) {
            System.out.println(e);
        }
        exportToExcel();
    }//GEN-LAST:event_exportButtonMouseClicked

    private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked
        // TODO add your handling code here:
        ItemsStockScreen obj = new ItemsStockScreen();
        obj.setVisible(true);
        
    }//GEN-LAST:event_jButton1MouseClicked

    private void printButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_printButtonActionPerformed

    private void tagPrintingMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tagPrintingMouseClicked
        // TODO add your handling code here:
        TagPrinting printing=new TagPrinting();
        printing.setVisible(true);
    }//GEN-LAST:event_tagPrintingMouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    public void exportToExcel() {
        XSSFWorkbook wb = new XSSFWorkbook();
        XSSFSheet ws = wb.createSheet();
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();

        TreeMap<String, Object[]> map = new TreeMap<>();

        map.put("0", new Object[]{model.getColumnName(0), model.getColumnName(1), model.getColumnName(2), model.getColumnName(3),
            model.getColumnName(4),});

        for (int i = 1; i < model.getRowCount(); i++) {
            ArrayList<String> list = new ArrayList<>();
            if (model.getValueAt(i, 0) != null) {
                list.add((String) model.getValueAt(i, 0));
            } else {
                list.add("");
            }
            if (model.getValueAt(i, 1) != null) {
                list.add((String) model.getValueAt(i, 1));
            } else {
                list.add("");
            }
            if (model.getValueAt(i, 2) != null) {
                list.add((String) model.getValueAt(i, 2));
            } else {
                list.add("");
            }
            if (model.getValueAt(i, 3) != null) {
                list.add((String) model.getValueAt(i, 3));
            } else {
                list.add("");
            }

            map.put(Integer.toString(i), new Object[]{
                list.get(0),
                list.get(1),
                list.get(2),
                list.get(3)
            });
        }

        Set<String> id = map.keySet();

        XSSFRow fRow;

        int rowId = 0;
        for (String key : id) {
            fRow = ws.createRow(rowId++);
            Object[] value = map.get(key);
            int cellId = 0;

            for (Object object : value) {
                XSSFCell cell = fRow.createCell(cellId++);
                cell.setCellValue(object.toString());
            }

            try ( FileOutputStream fos = new FileOutputStream(new File(paths));) {

                wb.write(fos);
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        JOptionPane.showMessageDialog(this, "file exported succesfully:" + paths);
    }

    private void emptyTextFields() {
        Component[] components = this.jPanel1.getComponents();

        for (Component component : components) {
            if (component instanceof JTextField) {
                JTextComponent textComponent = (JTextComponent) component;
                textComponent.setText("");
            }
        }
    }

    private void populateSuggestionsTableFromDatabase(DefaultTableModel suggestionsTable, String query) {
        
        try {
            List<List<String>> suggestions = new ArrayList<>();
            Connection c = DBConnect.connect();
            Statement stmt = c.createStatement();

            ResultSet rs = stmt.executeQuery(query);
            while (rs.next()) {
                String itemname = rs.getString("itemname");

                Statement st = c.createStatement();
                ResultSet rs1 = st.executeQuery("select sum(grosswt), sum(netwt), sum(diamondwt) from entryitem where "
                        + "itemname = '" + itemname + "';");

                String grosswt = "";
                String netwt = "";
                String diamondwt = "";

                while (rs1.next()) {
                    grosswt = String.format("%.2f", rs1.getDouble("sum(grosswt)"));
                    netwt = String.format("%.2f", rs1.getDouble("sum(netwt)"));
                    diamondwt = String.format("%.2f", rs1.getDouble("sum(diamondwt)"));
                }

                rs1.close();
                st.close();

                suggestions.add(Arrays.asList(itemname, grosswt, netwt, diamondwt));
            }

            rs.close();
            c.close();
            stmt.close();
           
            suggestionsTable.setRowCount(0);

            suggestions.forEach((suggestion) -> {
                suggestionsTable.addRow(new Object[]{
                    (suggestion.get(0) == null) ? "NULL" : suggestion.get(0),
                    (suggestion.get(1) == null) ? "NULL" : suggestion.get(1),
                    (suggestion.get(2) == null) ? "NULL" : suggestion.get(2),
                    (suggestion.get(3) == null) ? "NULL" : suggestion.get(3),});
            });

        } catch (SQLException e) {
            e.printStackTrace();
        } 
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ItemLists.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ItemLists.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ItemLists.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ItemLists.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ItemLists().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Refreshbtn;
    private javax.swing.JButton closebtn;
    private javax.swing.JButton exportButton;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    public javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JButton newbtn;
    private javax.swing.JButton printButton;
    private javax.swing.JButton tagPrinting;
    // End of variables declaration//GEN-END:variables
}
