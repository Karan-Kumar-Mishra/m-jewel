/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package jewellery;

import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Toolkit;
import java.awt.print.PageFormat;
import java.awt.print.Printable;
import java.awt.print.PrinterException;
import java.awt.print.PrinterJob;
import java.io.File;
import java.io.FileOutputStream;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Date;
import java.util.List;
import java.util.Set;
import java.util.TreeMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.SwingConstants;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
//import static jewelry.PurchaseRegisterScreen.populatePurchasesHistoryListTable;
import static jewellery.SaleRegisterScreen.populateSalesListTable;
import static kabitalib.util.Utilitas.dateFormat;
import org.apache.poi.xssf.usermodel.XSSFCell;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

/**
 *
 * @author Dhawal
 */
public class GSTR1B2B extends javax.swing.JFrame {

    /**
     * Creates new form GSTR1B2B
     */
    private DateTimeFormatter dateTimeFormatter;
    private final SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
    private static final DecimalFormat df = new DecimalFormat("0.00");
    private static List<List<Object>> selectedDatesData;
    private static DefaultTableModel salesListTableModel;
    private static String currentDate;
    private LocalDateTime localDateTime;
    private static String companyStateCode;
    private static Logger logger = Logger.getLogger(GSTR1B2B.class.getName());
    private static double totalTaxableAmountValue, totalBillAmountValue, totalTaxAmountValue;

    public GSTR1B2B() {

        initComponents();
        salesListTableModel = (DefaultTableModel) tblGSTHistoryData.getModel();
        centerTableCells();
        currentDate = getCurrentDate("yyyy-MM-dd");
        List<List<Object>> companyState = DBController.getDataFromTableforcompany("SELECT state_code FROM company "
                + "WHERE companyname = '"
                + GLOBAL_VARS.SELECTED_COMPANY + "';");
        companyStateCode = (String) companyState.get(0).get(0);
//        SwingUtilities.invokeLater(() -> {
//            populateSalesListTable();
//        });

        Dimension d = Toolkit.getDefaultToolkit().getScreenSize();

        int height = d.height;
        int width = d.width;

        jPanel1.setSize(width - 280, height - 125);

    }

    private void centerTableCells() {
        ((DefaultTableCellRenderer) tblGSTHistoryData
                .getDefaultRenderer(String.class))
                .setHorizontalAlignment(SwingConstants.CENTER);
    }

    private String getCurrentDate(String pattern) {
        dateTimeFormatter = DateTimeFormatter.ofPattern(pattern);
        localDateTime = LocalDateTime.now();

        return dateTimeFormatter.format(localDateTime);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane1 = new javax.swing.JSplitPane();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        btnOk = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        dateFrom = new com.toedter.calendar.JDateChooser();
        jLabel3 = new javax.swing.JLabel();
        dateTo = new com.toedter.calendar.JDateChooser();
        jLabel7 = new javax.swing.JLabel();
        jButton4 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblGSTHistoryData = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        totalBillAmount = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        totalTaxableAmount = new javax.swing.JTextField();
        totalTaxAmount = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel2.setBackground(new java.awt.Color(57, 68, 76));
        jPanel2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel2MouseClicked(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 153, 51));
        jLabel1.setText("GSTR-1");

        jButton1.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jButton1.setText("Print");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jButton2.setText("Export");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jButton3.setText("Selected Item");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        btnOk.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        btnOk.setText("OK");
        btnOk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOkActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 153, 51));
        jLabel2.setText("FROM");

        jLabel3.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 153, 51));
        jLabel3.setText("TO");

        jLabel7.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 153, 51));
        jLabel7.setText("B2C Sale Invoices to Taxable Person");

        jButton4.setBackground(new java.awt.Color(255, 0, 51));
        jButton4.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        jButton4.setText("Close");
        jButton4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton4MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addGap(0, 42, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addGap(31, 31, 31)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(dateFrom, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dateTo, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnOk, javax.swing.GroupLayout.DEFAULT_SIZE, 83, Short.MAX_VALUE)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton4)
                .addGap(28, 28, 28))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(btnOk, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGap(0, 12, Short.MAX_VALUE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(dateFrom, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING))))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel7)
                                    .addComponent(dateTo, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(29, 29, 29))))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        tblGSTHistoryData.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Bill No.", "Date", "Party", "GST No.", "Taxable Amt", "Rate", "IGST", "CGST", "SGST", "Tax Amt", "Total Amt"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblGSTHistoryData.setMaximumSize(new java.awt.Dimension(2147483647, 500));
        tblGSTHistoryData.setRowHeight(26);
        tblGSTHistoryData.getTableHeader().setReorderingAllowed(false);
        tblGSTHistoryData.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblGSTHistoryDataMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblGSTHistoryData);

        jLabel4.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel4.setText("Total Bill Amount");

        totalBillAmount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                totalBillAmountActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel5.setText("Total Taxable Amount");

        totalTaxableAmount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                totalTaxableAmountActionPerformed(evt);
            }
        });

        totalTaxAmount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                totalTaxAmountActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel6.setText("Total Tax Amount");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addContainerGap())
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(totalBillAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(38, 38, 38)
                        .addComponent(jLabel5)
                        .addGap(18, 18, 18)
                        .addComponent(totalTaxableAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 67, Short.MAX_VALUE)
                        .addComponent(jLabel6)
                        .addGap(33, 33, 33)
                        .addComponent(totalTaxAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(69, 69, 69))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 412, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(53, 53, 53)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(totalBillAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(totalTaxableAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(totalTaxAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(39, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(87, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        PrinterJob job = PrinterJob.getPrinterJob();
        job.setJobName("Print Data");

        job.setPrintable(new Printable() {
            public int print(Graphics pg, PageFormat pf, int pageNum) {
                pf.setOrientation(PageFormat.LANDSCAPE);
                if (pageNum > 0) {
                    return Printable.NO_SUCH_PAGE;
                }

                Graphics2D g2 = (Graphics2D) pg;
                g2.translate(pf.getImageableX(), pf.getImageableY());
                g2.scale(0.55, 1.0);

                jPanel1.print(g2);

                return Printable.PAGE_EXISTS;

            }
        });
        boolean ok = job.printDialog();
        if (ok) {
            try {

                job.print();
            } catch (PrinterException ex) {
                ex.printStackTrace();
            }
        }
    }//GEN-LAST:event_jButton1ActionPerformed
    public void populateSalesListTable(String fromDate, String toDate) {
      try{
          if (selectedDatesData != null && selectedDatesData.size() > 0) {
            selectedDatesData.clear();
        }

        totalTaxableAmountValue = 0;
        totalBillAmountValue = 0;
        totalTaxAmountValue = 0;

        salesListTableModel.setRowCount(0);

        if (!DBController.isDatabaseConnected()) {
            DBController.connectToDatabase(DatabaseCredentials.DB_ADDRESS,
                    DatabaseCredentials.DB_USERNAME, DatabaseCredentials.DB_PASSWORD);
        }

        selectedDatesData = DBController.getDataFromTable("SELECT bill, date, partyname, gst, "
                + "taxable_amount,rate, gstamt, netamount"
                + " FROM "
                + DatabaseCredentials.SALES_TABLE
                + " WHERE date BETWEEN " + "'" + fromDate + "'" + " AND " + "'" + toDate + "'");

        selectedDatesData.forEach((List<Object> item) -> {

            int billNo = (int) item.get(0);
            Date date = (Date) item.get(1);
            String partyname = (String) item.get(2);
            String gstNo = (String) item.get(3);        // can be null
            double taxable_amt = Double.valueOf(item.get(4).toString());
            Long rate =Long.valueOf(item.get(5).toString());            // can be null
            double gst_amt = Double.parseDouble(item.get(6).toString());
            Double netamount = Double.parseDouble(item.get(7).toString());   // can be null
            String finalRate = "";
            if (rate != null) {
                finalRate = String.valueOf(rate);
            } else {
                rate = 0L;
            }

            String finalnetamount = "";
            if (netamount != null) {
                finalnetamount = String.valueOf(netamount);
            } else {
                netamount = 0.0;
            }

            totalTaxableAmountValue += taxable_amt;
            totalBillAmountValue += netamount;
            totalTaxAmountValue += gst_amt;

            double igst = 0.0, cgst = 0.0, sgst = 0.0;
            List<List<Object>> partyState = DBController.getDataFromTable("SELECT statecode FROM " + DatabaseCredentials.ACCOUNT_TABLE
                    + " WHERE accountname = '"
                    + partyname + "';");

            /**
             * there are people who have no data in account table, so I can't
             * get their state code
             */
            String partyStateCode = "";
            if (!partyState.isEmpty()) {
                partyStateCode = (String) partyState.get(0).get(0);
            }

            String figst = "", fcgst = "", fsgst = "";
            if (partyStateCode.equals("")) {
                // got no record of it's state code
            } else if (partyStateCode.equals(companyStateCode) || partyname.equalsIgnoreCase("cash")) {
                cgst = gst_amt / 2.0;
                sgst = gst_amt / 2.0;
                fcgst = String.valueOf(df.format(cgst));
                fsgst = String.valueOf(df.format(sgst));
                figst = "";
            } else if (!partyStateCode.equals(companyStateCode)) {
                igst = gst_amt;
                fcgst = "";
                fsgst = "";
                figst = String.valueOf(df.format(igst));
            }

            salesListTableModel.addRow(new Object[]{
                billNo, date, partyname, gstNo, taxable_amt, finalRate, figst, fcgst, fsgst, gst_amt, finalnetamount

            });
        });

        totalTaxableAmount.setText(String.valueOf(df.format(totalTaxableAmountValue)));
        totalBillAmount.setText(String.valueOf(df.format(totalBillAmountValue)));
        totalTaxAmount.setText(String.valueOf(df.format(totalTaxAmountValue)));
      }catch(Exception e){
          logger.log(Level.SEVERE,null, e);
      }
        
    }

    String paths = "";

    public void exportToExcel() {
        XSSFWorkbook wb = new XSSFWorkbook();
        XSSFSheet ws = wb.createSheet();
        DefaultTableModel model = (DefaultTableModel) tblGSTHistoryData.getModel();

        TreeMap<String, Object[]> map = new TreeMap<>();

        map.put("0", new Object[]{model.getColumnName(0), model.getColumnName(1), model.getColumnName(2), model.getColumnName(3),
            model.getColumnName(4), model.getColumnName(5), model.getColumnName(6), model.getColumnName(7), model.getColumnName(8),
            model.getColumnName(9), model.getColumnName(10)});

        for (int i = 1; i < model.getRowCount(); i++) {
            map.put(Integer.toString(i), new Object[]{model.getValueAt(i, 0), model.getValueAt(i, 1), model.getValueAt(i, 2),
                model.getValueAt(i, 3), model.getValueAt(i, 4), model.getValueAt(i, 5), model.getValueAt(i, 6), model.getValueAt(i, 7),
                model.getValueAt(i, 8), model.getValueAt(i, 9), model.getValueAt(i, 10),});
        }

        Set<String> id = map.keySet();

        XSSFRow fRow;

        int rowId = 0;
        for (String key : id) {
            fRow = ws.createRow(rowId++);
            Object[] value = map.get(key);
            int cellId = 0;

            for (Object object : value) {
                XSSFCell cell = fRow.createCell(cellId++);
                cell.setCellValue(object.toString());
            }

            try (FileOutputStream fos = new FileOutputStream(new File(paths));) {

                wb.write(fos);
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        JOptionPane.showMessageDialog(this, "file exported succesfully:" + paths);
    }
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.showSaveDialog(this);
        //        File saveFile = JFileChooser.getSelectedFile();
        SimpleDateFormat dateFormat = new SimpleDateFormat("YYYY-MM-dd");
        String date = dateFormat.format(new Date());

        try {
            File f = fileChooser.getSelectedFile();
            String path = f.getAbsolutePath();
            path = path + "_" + date + ".xlsx";
            paths = path;
        } catch (Exception e) {
            System.out.println(e);
        }
        exportToExcel();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void btnOkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOkActionPerformed
        if (!DBController.isDatabaseConnected()) {
            DBController.connectToDatabase(DatabaseCredentials.DB_ADDRESS,
                    DatabaseCredentials.DB_USERNAME, DatabaseCredentials.DB_PASSWORD);
        }

        if (UtilityMethods.hasDateBeenPicked(dateFrom)
                && UtilityMethods.hasDateBeenPicked(dateTo)) {

            Logger.getLogger(DBController.class.getName()).log(Level.INFO, "{0} {1}",
                    new Object[]{dateFormat.format(dateFrom.getDate()), dateFormat.format(dateTo.getDate())});

            populateSalesListTable(dateFormat.format(dateFrom.getDate()),
                    dateFormat.format(dateTo.getDate()));

        }
    }//GEN-LAST:event_btnOkActionPerformed
    public void populateSalesListTable() {

        salesListTableModel.setRowCount(0);

        List<List<Object>> salesItems;

        totalTaxableAmountValue = 0.0;
        totalBillAmountValue = 0.0;
        totalTaxAmountValue = 0.0;

        if (DBController.isDatabaseConnected()) {

            selectedDatesData = DBController.getDataFromTable("SELECT bill, date, partyname, gst, "
                    + "taxable_amount,rate, gstamt, netamount"
                    + " FROM "
                    + DatabaseCredentials.SALES_TABLE + ";");

            selectedDatesData.forEach((List<Object> item) -> {

                int billNo = (int) item.get(0);
                Date date = (Date) item.get(1);
                String partyname = (String) item.get(2);
                String gstNo = (String) item.get(3);        // can be null
                long taxable_amt = (long) item.get(4);
                Long rate = (Long) item.get(5);             // can be null
                double gst_amt = (double) item.get(6);
                Double netamount = (Double) item.get(7);    // can be null
                String finalRate = "";
                if (rate != null) {
                    finalRate = String.valueOf(rate);
                } else {
                    rate = 0L;
                }

                String finalnetamount = "";
                if (netamount != null) {
                    finalnetamount = String.valueOf(netamount);
                } else {
                    netamount = 0.0;
                }

                totalTaxableAmountValue += taxable_amt;
                totalBillAmountValue += netamount;
                totalTaxAmountValue += gst_amt;

                double igst = 0.0, cgst = 0.0, sgst = 0.0;
                List<List<Object>> partyState = DBController.getDataFromTable("SELECT statecode FROM " + DatabaseCredentials.ACCOUNT_TABLE
                        + " WHERE accountname = '"
                        + partyname + "';");

                /**
                 * there are people who have no data in account table, so I
                 * can't get their state code
                 */
                String partyStateCode = "";
                if (!partyState.isEmpty()) {
                    partyStateCode = (String) partyState.get(0).get(0);
                }

                String figst = "", fcgst = "", fsgst = "";
                if (partyStateCode.equals("")) {
                    // got no record of it's state code
                } else if (partyStateCode.equals(companyStateCode) || partyname.equalsIgnoreCase("cash")) {
                    cgst = gst_amt / 2.0;
                    sgst = gst_amt / 2.0;
                    fcgst = String.valueOf(df.format(cgst));
                    fsgst = String.valueOf(df.format(sgst));
                    figst = "";
                } else if (!partyStateCode.equals(companyStateCode)) {
                    igst = gst_amt;
                    fcgst = "";
                    fsgst = "";
                    figst = String.valueOf(df.format(igst));
                } 

                salesListTableModel.addRow(new Object[]{
                    billNo, date, partyname, gstNo, taxable_amt, finalRate, figst, fcgst, fsgst, gst_amt, finalnetamount

                });
            });

        } else {
            DBController.connectToDatabase(DatabaseCredentials.DB_ADDRESS,
                    DatabaseCredentials.DB_USERNAME, DatabaseCredentials.DB_PASSWORD);

            selectedDatesData = DBController.getDataFromTable("SELECT bill, date, partyname, gst, "
                    + "taxable_amount,rate, gstamt, netamount"
                    + " FROM "
                    + DatabaseCredentials.SALES_TABLE);

            selectedDatesData.forEach((List<Object> item) -> {

                int billNo = (int) item.get(0);
                Date date = (Date) item.get(1);
                String partyname = (String) item.get(2);
                String gstNo = (String) item.get(3);        // can be null
                long taxable_amt = (long) item.get(4);
                Long rate = (Long) item.get(5);             // can be null
                double gst_amt = (double) item.get(6);
                Double netamount = (Double) item.get(7);    // can be null
                String finalRate = "";
                if (rate != null) {
                    finalRate = String.valueOf(rate);
                } else {
                    rate = 0L;
                }

                String finalnetamount = "";
                if (netamount != null) {
                    finalnetamount = String.valueOf(netamount);
                } else {
                    netamount = 0.0;
                }

                totalTaxableAmountValue += taxable_amt;
                totalBillAmountValue += netamount;
                totalTaxAmountValue += gst_amt;

                double igst = 0.0, cgst = 0.0, sgst = 0.0;
                List<List<Object>> partyState = DBController.getDataFromTable("SELECT statecode FROM " + DatabaseCredentials.ACCOUNT_TABLE
                        + " WHERE accountname = '"
                        + partyname + "';");

                /**
                 * there are people who have no data in account table, so I
                 * can't get their state code
                 */
                String partyStateCode = "";
                if (!partyState.isEmpty()) {
                    partyStateCode = (String) partyState.get(0).get(0);
                }

                String figst = "", fcgst = "", fsgst = "";
                if (partyStateCode.equals("")) {
                    // got no record of it's state code
                } else if (partyStateCode.equals(companyStateCode) || partyname.equalsIgnoreCase("cash")) {
                    cgst = gst_amt / 2.0;
                    sgst = gst_amt / 2.0;
                    fcgst = String.valueOf(df.format(cgst));
                    fsgst = String.valueOf(df.format(sgst));
                    figst = "";
                } else if (!partyStateCode.equals(companyStateCode)) {
                    igst = gst_amt;
                    fcgst = "";
                    fsgst = "";
                    figst = String.valueOf(df.format(igst));
                } 

                salesListTableModel.addRow(new Object[]{
                    billNo, date, partyname, gstNo, taxable_amt, finalRate, figst, fcgst, fsgst, gst_amt, finalnetamount

                });
            });

        }

        totalTaxableAmount.setText(String.valueOf(df.format(totalTaxableAmountValue)));
        totalBillAmount.setText(String.valueOf(df.format(totalBillAmountValue)));
        totalTaxAmount.setText(String.valueOf(df.format(totalTaxAmountValue)));

    }
    private void tblGSTHistoryDataMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblGSTHistoryDataMouseClicked
        // TODO add your handling code here:
        DefaultTableModel m = (DefaultTableModel) tblGSTHistoryData.getModel();
        int row = tblGSTHistoryData.getSelectedRow();
//        String recp = m.getValueAt(row, 1).toString();
//        PurchaseScreen sc = new PurchaseScreen();
//
//        sc.sale_Bill(Integer.parseInt(recp));
//        sc.setVisible(true);
//        dispose();
//        String recp = m.getValueAt(row, 0).toString();
//        SaleScreen sc = new SaleScreen();
//
//        sc.sale_Bill(Integer.parseInt(recp));
//        sc.setVisible(true);
//        sc.closebtn.setVisible(false);
//        dispose();
    }//GEN-LAST:event_tblGSTHistoryDataMouseClicked

    private void totalBillAmountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_totalBillAmountActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_totalBillAmountActionPerformed

    private void totalTaxableAmountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_totalTaxableAmountActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_totalTaxableAmountActionPerformed

    private void totalTaxAmountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_totalTaxAmountActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_totalTaxAmountActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jPanel2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel2MouseClicked
        // TODO add your handling code here:

    }//GEN-LAST:event_jPanel2MouseClicked

    private void jButton4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton4MouseClicked
         this.dispose();
         DashBoardScreen.tabbedPane.remove(DashBoardScreen.tabbedPane.getSelectedComponent());
    }//GEN-LAST:event_jButton4MouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GSTR1B2B.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GSTR1B2B.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GSTR1B2B.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GSTR1B2B.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GSTR1B2B().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnOk;
    private com.toedter.calendar.JDateChooser dateFrom;
    private com.toedter.calendar.JDateChooser dateTo;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JTable tblGSTHistoryData;
    private javax.swing.JTextField totalBillAmount;
    private javax.swing.JTextField totalTaxAmount;
    private javax.swing.JTextField totalTaxableAmount;
    // End of variables declaration//GEN-END:variables
}
