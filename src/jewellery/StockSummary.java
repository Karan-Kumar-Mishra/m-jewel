/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package jewellery;

import java.awt.Color;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.InputStream;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import jewellery.helper.RealSettingsHelper;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sf.jasperreports.engine.design.JRDesignQuery;
import net.sf.jasperreports.engine.design.JasperDesign;
import net.sf.jasperreports.engine.xml.JRXmlLoader;
import net.sf.jasperreports.view.JasperViewer;

/**
 *
 * @author pawantiwari
 */
public class StockSummary extends javax.swing.JFrame {

    /**
     * Creates new form StockSummary
     */
    private final SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
    public StockSummary() {
        initComponents();
        Color customColor = new Color(0x39, 0x44, 0x4C);
        getContentPane().setBackground(customColor);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        fromdate = new com.toedter.calendar.JDateChooser();
        todate = new com.toedter.calendar.JDateChooser();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 40)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(238, 188, 81));
        jLabel1.setText("STOCK SUMMARY");

        jLabel2.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(238, 188, 81));
        jLabel2.setText("From");

        jLabel3.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(238, 188, 81));
        jLabel3.setText("To");

        jButton1.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        jButton1.setText("Ok");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jButton1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jButton1KeyPressed(evt);
            }
        });

        jButton2.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        jButton2.setText("Print");
        jButton2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton2MouseClicked(evt);
            }
        });
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jButton2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jButton2KeyPressed(evt);
            }
        });

        jButton3.setBackground(new java.awt.Color(255, 0, 51));
        jButton3.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        jButton3.setText("Close");
        jButton3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton3MouseClicked(evt);
            }
        });
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jTable1.setFont(new java.awt.Font("Helvetica Neue", 0, 15)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Description", "Op. Qty", "Op Value", "Pr. Qty", "Pr. Value", "Total", "Sale Qty", "Sale Value", "Cl Qty", "Cl Value"
            }
        ));
        jTable1.setRowHeight(25);
        jScrollPane1.setViewportView(jTable1);
        JTableHeader header = jTable1.getTableHeader();
        header.setFont(new Font("Helvetica Neue", Font.BOLD, 16));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addComponent(jLabel1)
                .addGap(140, 140, 140)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(21, 21, 21))
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(fromdate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(todate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addGap(18, 18, 18)
                .addComponent(jButton2)
                .addGap(18, 18, 18)
                .addComponent(jButton3)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(9, 9, 9)
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(fromdate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(todate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel3)))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(46, 46, 46)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(17, 17, 17))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void InsertTableHidingFields(String value) {
        try {
            Connection con = DBConnect.connect();
            Statement stmt = con.createStatement();
            String sql = "UPDATE hidingFields set tagno='" + value + "'";
             int r= stmt.executeUpdate(sql);
           
        } catch (Exception e) {
            System.out.println(e);
            JOptionPane.showMessageDialog(null, e);
        }
    }
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton3MouseClicked
        DashBoardScreen.tabbedPane.remove(DashBoardScreen.tabbedPane.getSelectedComponent());
        dispose();
    }//GEN-LAST:event_jButton3MouseClicked
 
    private void stockSummaryTable(String fromDate, String toDate){
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        model.setRowCount(0);
        try {
            if (!DBController.isDatabaseConnected()) {
                DBController.connectToDatabase(DatabaseCredentials.DB_ADDRESS, DatabaseCredentials.DB_USERNAME,
                        DatabaseCredentials.DB_PASSWORD);
            }
            String selectedItem = "";
            String query = "SELECT DISTINCT(itemname) FROM " + DatabaseCredentials.ENTRY_ITEM_TABLE
                    + " WHERE itemname LIKE '" + selectedItem + "%';";
            List<List<Object>> items = DBController.getDataFromTable(query);

            items.forEach((item) -> {
                if (item.get(0) != null) {  // Null check
                    String itemname = item.get(0).toString();

                    String openingQtyQuery = "SELECT SUM(CAST(opqty as Integer)) FROM " + DatabaseCredentials.ENTRY_ITEM_TABLE
                            + " WHERE itemname='" + itemname + "' ;";

                    List<List<Object>> opening = DBController.getDataFromTable(openingQtyQuery);
                    int temp = 0;
                    if (!opening.isEmpty() && opening.get(0).get(0) != null) {
                        temp = Integer.parseInt(opening.get(0).get(0).toString());
                    }


                    int opqty = temp;
                    
                   
                    String q = "SELECT SUM(CAST(opqty as Integer)) FROM " + DatabaseCredentials.ENTRY_ITEM_TABLE
                            + " WHERE itemname='" + itemname + "' ;";

                    List<List<Object>> totalcount = DBController.getDataFromTable(q);
                    totalcount.forEach((itemcount) -> {
                        if (!itemcount.isEmpty() && itemcount.get(0) != null) {  // Null check
                            
                            int saleQty = 0;
                            int saleValue = 0;
                            

                            
                            List<List<Object>> notSold1 = DBController.getDataFromTable(
                                "SELECT SUM(CAST(qty AS INT)), SUM(CAST(taxable_amount AS INT)) " +
                                "FROM " + DatabaseCredentials.SALES_TABLE + 
                                " WHERE itemname = '" + itemname + "' " +
                                "AND date BETWEEN '" + fromDate + "' AND '" + toDate + "' " +
                                "GROUP BY date"
                            );

                            
                            for (List<Object> list : notSold1) {
                                
                                if (list.get(0) != null) {
                                    saleQty = Integer.parseInt(list.get(0).toString());
                                    saleValue = Integer.parseInt(list.get(1).toString());
                                }
                            }


                            if (!RealSettingsHelper.gettagNoIsTrue()) {
                                String query12 = "SELECT SUM(qty), SUM(taxable_amt) FROM purchasehistory WHERE itemname='" + itemname + 
                                "' AND date BETWEEN '" + fromDate + "' AND '" + toDate + "'";

                                List<List<Object>> purchasevalues = DBController.getDataFromTable(query12);
                                int op = 0;
                                int purchaseValue = 0;

                                for (List<Object> list : purchasevalues) {
                                
                                    if (list.get(0) != null) {
                                        op = Integer.parseInt(list.get(0).toString());
                                        purchaseValue = Integer.parseInt(list.get(1).toString());
                                    }
                                }
                                    
                                    
                                    
                                    int closingQty = (int) opqty + op - saleQty;
                                    
                                    int closingValue = (int) purchaseValue - saleValue;
                                    if(closingQty == 0){
                                        closingValue = 0;
                                    }
                                        
                                    int totalqty = (int) opqty + op;
                                    
                                  
                                    
                                    
  
                                    model.addRow(new Object[]{
                                        itemname,
                                        (int) opqty,
                                        "0",
                                        (op),
                                        (int) purchaseValue,
                                        (int)totalqty,
                                        (int) saleQty,
                                        (int) saleValue,
                                        (int)closingQty,
                                        (int)closingValue
                                        
                                    });
                                
                            } else {
                                String query12 = "SELECT SUM(qty), SUM(taxable_amt) FROM purchasehistory WHERE itemname='" + itemname + 
                                "' AND date BETWEEN '" + fromDate + "' AND '" + toDate + "'";

                                List<List<Object>> purchasevalues = DBController.getDataFromTable(query12);
                                int op = 0;
                                int purchaseValue = 0;

                                for (List<Object> list : purchasevalues) {
                                
                                    if (list.get(0) != null) {
                                        op = Integer.parseInt(list.get(0).toString());
                                        purchaseValue =Integer.parseInt(list.get(1).toString());
                                    }
                                }
                                    
                                    
                                    
                                    int closingQty = (int) opqty + op - saleQty;
                                    
                                    int closingValue = (int) purchaseValue - saleValue;
                                    if(closingQty == 0){
                                        closingValue = 0;
                                    }
                                        
                                    int totalqty = (int)opqty + op;
                                    
                                  
                                    
                                    

                                    model.addRow(new Object[]{
                                        itemname,
                                        (int) opqty,
                                        "0",
                                        (int)(op),
                                        (int)purchaseValue,
                                        (int) totalqty,
                                       (int) saleQty,
                                       (int) saleValue,
                                        (int)closingQty,
                                        (int)closingValue
                                        
                                    });
//                                
                            }
                        }
                    });
                }
            });
        } catch (Exception e) {
            Logger.getLogger(StockSummary.class.getName()).log(Level.SEVERE, null, e);
        }
        
    }
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        jButton1.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                
                if (!DBController.isDatabaseConnected()) {
                    DBController.connectToDatabase(DatabaseCredentials.DB_ADDRESS,
                            DatabaseCredentials.DB_USERNAME, DatabaseCredentials.DB_PASSWORD);
                }

                stockSummaryTable(dateFormat.format(fromdate.getDate()),
                            dateFormat.format(todate.getDate()));
                InsertTableHidingFields("false");
                
                
                
        
            }
            
        });
    }//GEN-LAST:event_jButton1ActionPerformed

    private void printx(String fromDate, String toDate) {
        Connection connection = null;
        try {
            // Establishing the database connection
            connection = DBConnect.connect();
            // Prepare a list to hold report data
            List<Map<String, Object>> itemDataList = new ArrayList<>();
            HashMap<String, Object> parameters = new HashMap<>();
            
            String selectedItem = "";
            String query = "SELECT DISTINCT(itemname) FROM " + DatabaseCredentials.ENTRY_ITEM_TABLE
                    + " WHERE itemname LIKE '" + selectedItem + "%';";
            List<List<Object>> items = DBController.getDataFromTable(query);

            items.forEach((item) -> {
                if (item.get(0) != null) {  // Null check
                    String itemname = item.get(0).toString();

                    String openingQtyQuery = "SELECT SUM(CAST(opqty as INT)) FROM " + DatabaseCredentials.ENTRY_ITEM_TABLE
                            + " WHERE itemname='" + itemname + "' ;";

                    List<List<Object>> opening = DBController.getDataFromTable(openingQtyQuery);
                    int temp = 0;
                    if (!opening.isEmpty() && opening.get(0).get(0) != null) {
                        temp = Integer.parseInt(opening.get(0).get(0).toString());
                    }


                    int opqty = temp;
                    
                   
                    String q = "SELECT SUM(CAST(opqty as INT)) FROM " + DatabaseCredentials.ENTRY_ITEM_TABLE
                            + " WHERE itemname='" + itemname + "' ;";

                    List<List<Object>> totalcount = DBController.getDataFromTable(q);
                    totalcount.forEach((itemcount) -> {
                        if (!itemcount.isEmpty() && itemcount.get(0) != null) {  // Null check
                            
                            int saleQty = 0;
                            int saleValue = 0;
                            

                            
                            List<List<Object>> notSold1 = DBController.getDataFromTable(
                                "SELECT SUM(CAST(qty AS INT)), SUM(CAST(taxable_amount AS INT)) " +
                                "FROM " + DatabaseCredentials.SALES_TABLE + 
                                " WHERE itemname = '" + itemname + "' " +
                                "AND date BETWEEN '" + fromDate + "' AND '" + toDate + "' " +
                                "GROUP BY date"
                            );


                            
                            for (List<Object> list : notSold1) {
                                
                                if (list.get(0) != null) {
                                    saleQty = Integer.parseInt(list.get(0).toString());
                                    saleValue = Integer.parseInt(list.get(1).toString());
                                }
                            }


                            
                            String query12 = "SELECT SUM(qty), SUM(taxable_amt) FROM purchasehistory WHERE itemname='" + itemname + 
                            "' AND date BETWEEN '" + fromDate + "' AND '" + toDate + "'";

                            List<List<Object>> purchasevalues = DBController.getDataFromTable(query12);
                            int op = 0;
                            int purchaseValue = 0;

                            for (List<Object> list : purchasevalues) {

                                if (list.get(0) != null) {
                                    op = Integer.parseInt(list.get(0).toString());
                                    purchaseValue = Integer.parseInt(list.get(1).toString());
                                }
                            }



                                int closingQty = (int) opqty + op - saleQty;

                                int closingValue = (int) purchaseValue - saleValue;
                                if(closingQty == 0){
                                    closingValue = 0;
                                }

                                int totalqty = (int) opqty + op;

                                
                                
                                Map<String, Object> itemParameters = new HashMap<>();
                                itemParameters.put("itemname", itemname);
                                itemParameters.put("opqty",(int) opqty);
                                itemParameters.put("opvalues", "0");
                                itemParameters.put("purchaseQty",(int) op);
                                itemParameters.put("purchasevalue",(int) purchaseValue);
                                itemParameters.put("totalQty",(int) totalqty);
                                itemParameters.put("saleQty", (int)saleQty);
                                itemParameters.put("saleValue", (int)saleValue);
                                itemParameters.put("closingQty", (int)closingQty);
                                itemParameters.put("closingValue",(int) closingValue);

                                // Add the current item's parameters to the list
                                itemDataList.add(itemParameters);


                            
                            
                        }
                    });
                }
            });
            
        
            
           
            
            
            
            
            parameters.put("itemDataList", itemDataList);

            File reportFile = new File("jasper_reports" + File.separator + "stock_summary.jrxml");
            if (!reportFile.exists()) {
                throw new FileNotFoundException("Report file not found: " + reportFile.getAbsolutePath());
            }

            InputStream input = new FileInputStream(reportFile);
            JasperDesign design = JRXmlLoader.load(input);

            // Set the SQL query in the JasperReport design
            JRDesignQuery updateQuery = new JRDesignQuery();
            updateQuery.setText(query);
            design.setQuery(updateQuery);

            // Set the real path for any images used in the report
            String realPath = System.getProperty("user.dir") + File.separator + "jasper_reports" + File.separator + "img" + File.separator;
            parameters.put("imagePath", realPath);

            // Compile the Jasper report
            JasperReport jreport = JasperCompileManager.compileReport(design);

            // Fill the report with data from the query, using the database connection
            JRBeanCollectionDataSource dataSource = new JRBeanCollectionDataSource(itemDataList);
            JasperPrint jprint = JasperFillManager.fillReport(jreport, parameters, dataSource);

            // Display the report in JasperViewer
            JasperViewer.viewReport(jprint, false);

        }catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "An error occurred: " + ex.getMessage());
            Logger.getLogger(ItemsStockScreen.class.getName()).log(Level.SEVERE, null, ex);

        } 
    }
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        
//                printx(dateFormat.format(fromdate.getDate()),
//                            dateFormat.format(todate.getDate()));
//                InsertTableHidingFields("false");
                
                
                
        
            
            
        
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jButton1KeyPressed
        
    }//GEN-LAST:event_jButton1KeyPressed

    private void jButton2KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jButton2KeyPressed
       
    }//GEN-LAST:event_jButton2KeyPressed

    private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked
       if (!DBController.isDatabaseConnected()) {
                    DBController.connectToDatabase(DatabaseCredentials.DB_ADDRESS,
                            DatabaseCredentials.DB_USERNAME, DatabaseCredentials.DB_PASSWORD);
                }

                stockSummaryTable(dateFormat.format(fromdate.getDate()),
                            dateFormat.format(todate.getDate()));
                InsertTableHidingFields("false");
    }//GEN-LAST:event_jButton1MouseClicked

    private void jButton2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton2MouseClicked
        printx(dateFormat.format(fromdate.getDate()),
                            dateFormat.format(todate.getDate()));
                InsertTableHidingFields("false");
    }//GEN-LAST:event_jButton2MouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(StockSummary.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(StockSummary.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(StockSummary.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(StockSummary.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new StockSummary().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.toedter.calendar.JDateChooser fromdate;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private com.toedter.calendar.JDateChooser todate;
    // End of variables declaration//GEN-END:variables
}
